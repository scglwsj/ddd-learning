@startuml parking

interface ParkingBoyService {
  ParkingLot? findOneAviliedParkingLot(ParkingLot[])
}

interface ParkingManagerService {
  ParkingBoy? findOneAviliedParkingBoy(ParkingBoy[])
}

class OrderParkingBoyService
class MostAvailableParkingBoyService
class RadomParkingManagerService

class ParkingBoy << Entity >> {
  ParkingLot[] parkingLots

  <<readonly>>
  + int availableSpaces
  <<readonly>>
  + Boolean hasAvailableSpaces

  + ParkingLot? findOneAviliedParkingLot()
}

class SeniorParkingBoy << Entity >>

class ParkingLot << Entity >> {
  Map <Ticket, Car> parkedCars

  <<readonly>>
  + ParkingLotId id
  <<readonly>>
  + int availableSpaces
  <<readonly>>
  + Boolean hasAvailableSpaces

  + Ticket park(Car car)
  + Car take(Ticket ticket)
}

class Car << Value Object >> {
    PlateNumber plateNumber
}

class Ticket << Value Object >> {
  TicketID id
  + Boolean validate()
}

class ParkingManager << Entity >> {
  ParkingBoy[] parkingBoys
  + ParkingBoy? findOneAviliedParkingBoy()
}

Ticket "1" *--> "1" Car
ParkingLot "1" o--> "0..many" Ticket
ParkingBoy "1" o--> "0..many" ParkingLot
OrderParkingBoyService --|> ParkingBoyService
MostAvailableParkingBoyService -|> ParkingBoyService
RadomParkingManagerService --|> ParkingManagerService
ParkingBoy "1" o-up-> "1" ParkingBoyService
SeniorParkingBoy -> ParkingBoy
ParkingManager "1" o-left-> "0..many" ParkingBoy
ParkingManager "1" o-up-> "1" ParkingManagerService

@enduml
