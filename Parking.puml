@startuml parking

interface ParkingBoyRule {
  ParkingLot? findOneValidParkingLot(ParkingLot[])
}

class OrderParkingBoyRule
class MostAvailableParkingBoyRule

class BaseParkingBoy << Entity >> {
  ParkingLot[] parkingLots
  ParkingBoyRule parkingBoyRule

  + Boolean checkAvailableLot()

  + ParkingLot? findOneValidParkingLot()
}

class ParkingLot << Entity >> {
  Map <Ticket, Car> parkedCars

  <<readonly>>
  + ParkingLotId id
  <<readonly>>
  + int availableSpaces
  <<readonly>>
  + Boolean hasAvailableSpaces

  + Ticket park(Car car)
  + Car take(Ticket ticket)
}

class Car << Value Object >> {
    PlateNumber plateNumber
}

class Ticket << Value Object >> {
  TicketID id
  + Boolean validate()
}

class ParkingManager << Entity >> {
  BaseParkingBoy[] parkingBoys
  + ParkingLot? findOneValidParkingLot()
}

Ticket "1" *--> "1" Car
ParkingLot "1" o--> "0..many" Ticket
BaseParkingBoy "1" o--> "0..many" ParkingLot
OrderParkingBoyRule --|> ParkingBoyRule
MostAvailableParkingBoyRule -up-|> ParkingBoyRule
BaseParkingBoy "1" o-left-> "1" ParkingBoyRule
ParkingManager "1" o--> "0..many" BaseParkingBoy

@enduml
